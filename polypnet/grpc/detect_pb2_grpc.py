# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from polypnet.grpc import detect_pb2 as detect__pb2


class PolypDetectionServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.BatchPolypDetect = channel.unary_unary(
        '/com.vdsense.polypnet.proto.PolypDetectionService/BatchPolypDetect',
        request_serializer=detect__pb2.BatchPolypDetectionRequest.SerializeToString,
        response_deserializer=detect__pb2.BatchPolypDetectionResponse.FromString,
        )
    self.StreamPolypDetect = channel.stream_stream(
        '/com.vdsense.polypnet.proto.PolypDetectionService/StreamPolypDetect',
        request_serializer=detect__pb2.PolypDetectionRequest.SerializeToString,
        response_deserializer=detect__pb2.PolypDetectionResponse.FromString,
        )


class PolypDetectionServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def BatchPolypDetect(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamPolypDetect(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PolypDetectionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'BatchPolypDetect': grpc.unary_unary_rpc_method_handler(
          servicer.BatchPolypDetect,
          request_deserializer=detect__pb2.BatchPolypDetectionRequest.FromString,
          response_serializer=detect__pb2.BatchPolypDetectionResponse.SerializeToString,
      ),
      'StreamPolypDetect': grpc.stream_stream_rpc_method_handler(
          servicer.StreamPolypDetect,
          request_deserializer=detect__pb2.PolypDetectionRequest.FromString,
          response_serializer=detect__pb2.PolypDetectionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'com.vdsense.polypnet.proto.PolypDetectionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
